<div class="container mt-5" id="repositories">
  <div id="liveAlertPlaceholder" class="p-1 m-1 d-flex flex-wrap"></div>
  <br />
  <%- include("newRepo") %>
  <div class="p-1 m-1 mt-3 overflow-8 border shadow rounded">
    <table class="table">
      <thead>
        <tr>
          <th>No</th>
          <th>Title</th>
          <th>Langauges</th>
          <th>Code</th>
          <th>Tag</th>
          <th>Created</th>
          <th>Last Updated</th>
          <th><i class="fa fa-gear" aria-hidden="true"></i></th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(repo_,index) in repos">
          <td>
            <span
              :class="`badge text-white rounded-pill btn bg-${repo_.home?'danger':'primary'}`"
              @click="handleSetHome(repo_.id, repo_.home)"
              >{{ index + 1 }}</span
            >
          </td>
          <td>{{ repo_.title }}</td>
          <td>
            <small>{{ repo_.languages.map(({name})=>name) }}</small>
          </td>
          <td>{{ repo_.code }}</td>
          <td>
            <small>{{ repo_.tag }}</small>
          </td>
          <td>{{ repo_.createdAt }}</td>
          <td>{{ repo_.updatedAt }}</td>
          <td>
            <i
              class="fa fa-trash btn btn-outline-danger btn-sm"
              aria-hidden="true"
              @click="handleRemoveRepo(repo_.id)"
            ></i>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<script type="module">
  new Vue({
    el: "#repositories",
    data() {
      return {
        username: "hades255",
        token: "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",
        repos: JSON.parse($("#init-repos").text()),
        non_repos: [],
        lan: { name: "", rate: 0 },
        repo: {
          title: "",
          type: "personal",
          github: "",
          img: "",
          imglink: "",
          languages: [],
          code: 0,
          tag: [],
        },
        usefile: "0",
        file: "",
        languageTags: [],
        usedTags: [],
      };
    },
    created() {
      //********************************* start make tags from repos
      this.repos.forEach((repo) => {
        repo.languages.forEach((lan) => {
          if (!this.languageTags.includes(lan.name))
            this.languageTags.push(lan.name);
        });
        repo.tag.forEach((tag) => {
          if (!this.usedTags.includes(tag)) this.usedTags.push(tag);
        });
      });
      this.languageTags.sort((a, b) => (a > b ? 1 : a < b ? -1 : 0));
      this.usedTags.sort((a, b) => (a > b ? 1 : a < b ? -1 : 0));
      //******************************** end

      //******************************* start github alert
      const username = this.username;
      const token = this.token;
      const appendAlert = this.appendAlert;
      const checkGithubRepoIsExist = this.checkGithubRepoIsExist;
      const addReposToNonRepos = this.addReposToNonRepos;
      (async function () {
        try {
          const response = await fetch(
            `https://api.github.com/users/${username}/repos`,
            {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );
          let repositories = await response.json();
          const timeout = () => {
            const repo = repositories.pop();
            if (typeof repo === "undefined") return;
            if (checkGithubRepoIsExist(repo.html_url)) {
              timeout();
            } else {
              addReposToNonRepos(repo);
              appendAlert(
                `<a href="${repo.html_url}" target="_blank" class="ms-3 me-3 p-3">${repo.name}</a>`,
                "success"
              );
              setTimeout(() => {
                timeout();
              }, 5);
            }
          };
          timeout();
        } catch (error) {
          appendAlert({ msg: "Github Connection Failed!" }, "Error");
        }
      })();
      //****************************************  end
    },
    methods: {
      handleSetHome(id, home) {
        fetch("/api/repos/" + id, {
          method: "put",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ home: home ? false : true }),
        })
          .then((response) => response.json())
          .then((res) => {
            $.toast({
              heading: "Success",
              text: "Your request is successfuly sended.",
              showHideTransition: "slide",
              icon: "success",
            });
            this.repos = res;
          })
          .catch((error) => {
            $.toast({
              heading: "Failure",
              text: "Something went wrong! Please try later.",
              showHideTransition: "slide",
              icon: "error",
            });
          });
      },
      setRepoFromObject({
        title,
        type,
        github,
        img,
        imglink,
        languages,
        code,
        tag,
      }) {
        tag.forEach((item) => {
          $("#tagsinput").tagsinput("add", item);
        });
        this.repo = { title, type, github, img, imglink, languages, code, tag };
      },
      handleChangeGithubSelector({ target: { value } }) {
        if (value === "") return;
        const repo = this.non_repos.filter((repo) => repo.github === value)[0];
        const token = this.token;
        const setRepoFromObject = this.setRepoFromObject;
        (async function () {
          const response = await fetch(repo.languages_url, {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
          const languages = await response.json();
          let arrLangs = [];
          for (let key in languages) {
            arrLangs.push({ name: key, value: languages[key] });
          }
          const code = arrLangs.reduce((sum, { value }) => sum + value, 0);
          setRepoFromObject({
            ...repo,
            code,
            languages: arrLangs.map((lang) => ({
              ...lang,
              rate: (Math.round((lang.value / code) * 1000) / 10).toFixed(1),
            })),
          });
        })();
      },
      addReposToNonRepos({
        name,
        visibility,
        html_url,
        languages_url,
        language,
        topics,
      }) {
        this.non_repos.push({
          title: name,
          type: visibility,
          github: html_url,
          img: "",
          imglink: "",
          languages: [],
          code: 0,
          tag: [language, ...topics],
          languages_url,
        });
      },
      checkGithubRepoIsExist(url) {
        if (url) {
          for (let repo of this.repos) {
            if (repo.github === url) {
              return true;
            }
          }
        }
        return false;
      },
      appendAlert(message, type) {
        const alertPlaceholder = document.getElementById(
          "liveAlertPlaceholder"
        );
        const wrapper = document.createElement("div");
        wrapper.innerHTML = [
          `<div class="alert alert-${type} alert-dismissible" role="alert">`,
          `   <div>${message}</div>`,
          '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
          "</div>",
        ].join("");

        alertPlaceholder.append(wrapper);
        return true;
      },
      handleAddLang() {
        if (!this.lan.name || !this.lan.rate) return;
        this.repo.languages.push({ name: this.lan.name, rate: this.lan.rate });
        this.lan.name = "";
        this.lan.rate = "";
      },
      handleRmLang(id) {
        this.repo.languages = this.repo.languages.filter(
          ({ name }) => name !== id
        );
      },
      handleSubmit() {
        event.preventDefault();
        if (
          this.usefile === "0" ||
          (this.usefile === "1" && !this.repo.img) ||
          (this.usefile === "2" && !this.repo.imglink)
        ) {
          window.alert("Please fill image field.");
          return;
        }
        if (this.usefile === "1") this.repo.imglink = null;
        this.repo.tag = $("#tagsinput").val();
        fetch("/api/repos", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(this.repo),
        })
          .then((response) => response.json())
          .then((res) => {
            $.toast({
              heading: "Success",
              text: "Your request is successfuly sended.",
              showHideTransition: "slide",
              icon: "success",
            });
          })
          .catch((error) => {
            $.toast({
              heading: "Failure",
              text: "Something went wrong! Please try later.",
              showHideTransition: "slide",
              icon: "error",
            });
          });
      },
      handleFileChange(e) {
        const form = new FormData();
        form.append("file", e.target.files[0]);
        fetch("/api/upload", {
          method: "POST",
          body: form,
        })
          .then((res) => res.json())
          .then((res) => {
            this.repo.img = res.file;
          })
          .catch((err) => ("Error occured", err));
      },
      handleRemoveRepo(id) {
        if (!window.confirm("Confirm Delete?")) return;
        const prompt = window.prompt("Please input admin password", "ADMIN");
        if (prompt !== "my password 0423.") return;
        fetch("/api/repos/" + id, {
          method: "DELETE",
        })
          .then((response) => response.json())
          .then((res) => {
            $.toast({
              heading: "Success",
              text: "Your request is successfuly sended.",
              showHideTransition: "slide",
              icon: "success",
            });
            this.repos = res;
          })
          .catch((error) => {
            $.toast({
              heading: "Failure",
              text: "Something went wrong! Please try later.",
              showHideTransition: "slide",
              icon: "error",
            });
          });
      },
      usedTagBadgeClass(index) {
        return (
          "m-1 badge btn rounded-pill bg-" +
          ["primary", "success", "warning", "danger", "info"][
            Math.round(index % 5)
          ]
        );
      },
      handleUsedTagClick(tag) {
        $("#tagsinput").tagsinput("add", tag);
      },
      showNewImage() {
        return (
          this.repo.imglink || `/img/repos/${this.repo.img || "gallery-2x.png"}`
        );
      },
    },
    computed: {},
  });
</script>
